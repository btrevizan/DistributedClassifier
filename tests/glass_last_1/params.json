{
    "iterations": 10,
    "random_state": 2,
    "overlap": 0,
    "classifiers": {
        "gnb": "sklearn.naive_bayes.GaussianNB()",
        "bnb": "sklearn.naive_bayes.BernoulliNB()",
        "svc": "sklearn.svm.SVC(probability=True)",
        "mlp": "sklearn.neural_network.MLPClassifier()",
        "dtree": "sklearn.tree.DecisionTreeClassifier()",
        "knn": "sklearn.neighbors.KNeighborsClassifier()",
        "gpc": "sklearn.gaussian_process.GaussianProcessClassifier()"
    },
    "metrics": {
        "f1_macro": "sklearn.metrics.f1_score(average='macro')",
        "f1_micro": "sklearn.metrics.f1_score(average='micro')",
        "recall_macro": "sklearn.metrics.recall_score(average='macro')",
        "recall_micro": "sklearn.metrics.recall_score(average='micro')",
        "specificity_macro": "src.metrics.specificity_score(average='macro')",
        "sensitivity_macro": "src.metrics.sensitivity_score(average='macro')",
        "specificity_micro": "src.metrics.specificity_score(average='micro')",
        "sensitivity_micro": "src.metrics.sensitivity_score(average='micro')",
        "accuracy": "sklearn.metrics.accuracy_score()",
        "precision_macro": "sklearn.metrics.precision_score(average='macro')",
        "precision_micro": "sklearn.metrics.precision_score(average='micro')"
    },
    "voter": {
        "borda": "borda",
        "copeland": "copeland",
        "plurality":  "plurality"
    },
    "combiner": {
        "cmb_gnb": "sklearn.naive_bayes.GaussianNB()",
        "cmb_bnb": "sklearn.naive_bayes.BernoulliNB()",
        "cmb_svc": "sklearn.svm.SVC(probability=True)",
        "cmb_mlp": "sklearn.neural_network.MLPClassifier()",
        "cmb_dtree": "sklearn.tree.DecisionTreeClassifier()",
        "cmb_knn": "sklearn.neighbors.KNeighborsClassifier()",
        "cmb_gpc": "sklearn.gaussian_process.GaussianProcessClassifier()"
    },
    "arbiter": {
        "arb_gnb": "sklearn.naive_bayes.GaussianNB()",
        "arb_bnb": "sklearn.naive_bayes.BernoulliNB()",
        "arb_svc": "sklearn.svm.SVC(probability=True)",
        "arb_mlp": "sklearn.neural_network.MLPClassifier()",
        "arb_dtree": "sklearn.tree.DecisionTreeClassifier()",
        "arb_knn": "sklearn.neighbors.KNeighborsClassifier()",
        "arb_gpc": "sklearn.gaussian_process.GaussianProcessClassifier()"
    },
    "selection_rules": {
        "md": "MetaDiff",
        "mdi": "MetaDiffInc",
        "mdic": "MetaDiffIncCorr"
    },
    "mathematician": {
        "max": ["mean", "median"]
    }
}
